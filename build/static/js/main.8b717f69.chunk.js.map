{"version":3,"sources":["api-services/apiServices.js","components/filterSelect/FilterSelect.js","containers/item-input/ItemInput.js","containers/map/Map.js","components/list/list-item/ListItem.js","components/list/List.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL_HERE","concat","process","apiServices","getCoordinates","_getCoordinates","Object","asyncToGenerator","regenerator_default","a","mark","_callee","address","geocode_url","coordinates","wrap","_context","prev","next","fetch","then","response","json","data","Response","View","length","Result","Location","DisplayPosition","latitude","Latitude","longitude","Longitude","catch","error","sent","abrupt","stop","this","_x","apply","arguments","getMatrixDistances","_getMatrixDistances","_callee2","userCoordinates","taskCoordinates","user","tasks","mapbox_url","distances","_args2","_context2","undefined","join","slice","map","d","FilterSelect","props","options","locationKeys","location","index","react_default","createElement","key","value","toUpperCase","className","htmlFor","name","id","filterKey","onChange","onFilterTaskLocations","filterDist","onFilterDistLocations","initTemp","text","distance","ItemInput","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isValidItem","state","temp_item","trim","handleSubmit","e","preventDefault","objectSpread","Date","now","toLowerCase","console","log","message","onAddItem","setState","isValid","handleInput","target","onSubmit","type","placeholder","Component","navStyle","position","top","left","padding","initViewport","zoom","width","window","innerWidth","height","innerHeight","Map","_isMounted","_updateViewport","viewport","_renderMarkers","point","esm","offsetLeft","offsetTop","_this2","getUserCoordinates","userLatitude","coords","userLongitude","_this$state","focusMapOnUserCoordinates","assign","mapStyle","mapboxApiAccessToken","onViewportChange","style","ListItem","classes","onClick","onDeleteItem","item","List","list","items","push","ErrorBoundary","hasError","children","React","App","handleAddItem","currentItem","hasOwnProperty","handleDeleteItem","allItems","listItems","filter","handleFilterTaskLocations","handleFilterDistLocations","values","flat","itemsWithinDistance","mapTasks","task","loc","reduce","acc","curr","Promise","res","rej","navigator","geolocation","getCurrentPosition","enableHighAccuracy","setUserCoordinatesToState","filteredItems","obj","toConsumableArray","ItemInput_ItemInput","keys","ErrorBoundary_ErrorBoundary","map_Map","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b717f69.chunk.js","sourcesContent":["const BASE_URL_HERE = `https://geocoder.api.here.com/6.2/geocode.json?app_id=${process.env.REACT_APP_APP_ID}&app_code=${process.env.REACT_APP_APP_CODE}`;\r\nconst BASE_URL_MAPBOX = `https://api.mapbox.com/directions-matrix/v1/mapbox/driving/`;\r\nconst token = process.env.REACT_APP_API_KEY;\r\n\r\nconst apiServices = {\r\n  // Using FETCH api to GET geocode of user's address entered\r\n  async getCoordinates(address) {\r\n    let geocode_url = `${BASE_URL_HERE}&searchtext=${address}`;\r\n\r\n    const coordinates = await fetch(geocode_url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // check for good status\r\n        // If view is empty, no locations so return null\r\n        if (data.Response.View.length === 0) return null;\r\n\r\n        // Access first relevant location, if non-existent return null\r\n        const coordinates = data.Response\r\n          .View[0]\r\n          .Result[0]\r\n          .Location\r\n          .DisplayPosition;\r\n\r\n        return {\r\n          latitude: coordinates.Latitude,\r\n          longitude: coordinates.Longitude\r\n        }\r\n      })\r\n      .catch(error => {\r\n        return null;\r\n      });\r\n    return coordinates;\r\n  },\r\n  //Need to associate each distance value with the task/location it corresponds to \r\n  async getMatrixDistances(userCoordinates = [], taskCoordinates = []) {\r\n    let user = userCoordinates.join(',') + ';';\r\n    let tasks = taskCoordinates.join(',') + '?'; \r\n\r\n    let mapbox_url = `${BASE_URL_MAPBOX}${user}${tasks}sources=0&annotations=distance&access_token=${token}`;\r\n\r\n    const distances = await fetch(mapbox_url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // check for good status; if no data, return null\r\n        if (!data.distances) return null;\r\n\r\n        const distances = data.distances[0]\r\n          .slice(1)\r\n          .map(d => d / 1609.344);\r\n        return distances[0];\r\n\r\n      })\r\n      .catch(error => {\r\n        return null;\r\n      });\r\n    return distances; \r\n  }\r\n}\r\n\r\nexport default apiServices;","import React from 'react'\r\n\r\nexport default function FilterSelect(props) {\r\n  const options = props.locationKeys.map((location, index) => (\r\n    <option key={index} value={location}>{ location.toUpperCase() }</option>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"list__filter\">\r\n      <label className=\"filter__label\" htmlFor=\"filter\">Filter by location:</label>\r\n      <select\r\n        className=\"filter__select\"\r\n        name=\"filter\"\r\n        id=\"filter\"\r\n        value={props.filterKey}\r\n        onChange={props.onFilterTaskLocations}\r\n      >\r\n        <option value=\"All\">ALL TASKS</option>\r\n        { options }\r\n      </select>\r\n\r\n      <label className=\"filter__label\" htmlFor=\"distance\">Only show markers within&nbsp; \r\n      <select\r\n        className=\"filter__select\"\r\n        name=\"distance\"\r\n        id=\"distance\"\r\n        value={props.filterDist}\r\n        onChange={props.onFilterDistLocations}\r\n      >\r\n        <option value=\"99999\"></option>       \r\n        <option value=\"5\">5</option>\r\n        <option value=\"10\">10</option>\r\n        <option value=\"25\">25</option>\r\n        <option value=\"50\">50</option>\r\n        <option value=\"100\">100</option>\r\n      </select>\r\n      &nbsp;miles</label>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport apiServices from '../../api-services/apiServices';\r\nimport FilterSelect from '../../components/filterSelect/FilterSelect';\r\n\r\nconst initTemp = {\r\n  address: '',\r\n  location: '',\r\n  text: '',\r\n  coordinates: [],\r\n  distance: ''\r\n}\r\n\r\nexport default class ItemInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      temp_item: initTemp,\r\n      isValid: true\r\n    }\r\n  }\r\n\r\n  isValidItem = () => {\r\n    return this.state.temp_item.text.trim() !== '' &&\r\n      this.state.temp_item.location.trim() !== '' &&\r\n      this.state.temp_item.address.trim() !== '';\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    // Prevent form submission\r\n    e.preventDefault();\r\n\r\n    // make sure fields are not empty\r\n    if (this.isValidItem()) {\r\n      // Add new item\r\n      const temp_item = {\r\n        ...this.state.temp_item,\r\n        key: Date.now(),\r\n        address: this.state.temp_item.address.trim().toLowerCase(),\r\n        location: this.state.temp_item.location.trim().toLowerCase(),\r\n        text: this.state.temp_item.text.trim().toLowerCase(),\r\n      };\r\n\r\n      // get coordinates from address entered using HERE Geocoder API\r\n      apiServices.getCoordinates(temp_item.address)\r\n        .then(coordinates => {\r\n          // add coordinate to address & get address coordinates from resulting JSON object\r\n          temp_item.coordinates = coordinates;\r\n\r\n          //fetch distance between user and task coordinates\r\n          const taskCoordinates = [\r\n            temp_item.coordinates.longitude,\r\n            temp_item.coordinates.latitude\r\n          ]\r\n          const userCoordinates = [\r\n            this.props.user.longitude,\r\n            this.props.user.latitude\r\n          ]\r\n      \r\n          apiServices.getMatrixDistances(userCoordinates, taskCoordinates)\r\n            .then(distance => {\r\n              temp_item.distance = distance;\r\n            })\r\n            .catch(error => {\r\n              console.log(error.message)\r\n            }\r\n            );\r\n\r\n          // add temp_item to list of tasks in parent\r\n          this.props.onAddItem(temp_item);\r\n        })\r\n        .catch(error => {\r\n          console.log(error.message)\r\n        }\r\n        ); \r\n      \r\n      // reset state variables of text, location, address, distance\r\n      this.setState({\r\n        temp_item: initTemp,\r\n        isValid: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isValid: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    const temp_item = { ...this.state.temp_item };\r\n\r\n    // update temp_item property from input\r\n    temp_item[e.target.name] = e.target.value;\r\n\r\n    this.setState({\r\n      temp_item,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"list-input\">\r\n        <div className=\"list-header\">\r\n          <p><em>All fields required.</em></p>\r\n          <form className=\"list-form\" onSubmit={this.handleSubmit}>\r\n            <input\r\n              className=\"form-control mb-1\"\r\n              type=\"text\"\r\n              placeholder=\"Task (eg, Get Groceries)\"\r\n              name=\"text\"\r\n              value={this.state.temp_item.text}\r\n              onChange={this.handleInput}\r\n            />\r\n\r\n            <input\r\n              className=\"form-control mb-1\"\r\n              type=\"text\"\r\n              placeholder=\"Location (eg, Supermarket)\"\r\n              name=\"location\"\r\n              value={this.state.temp_item.location}\r\n              onChange={this.handleInput}\r\n            />\r\n\r\n            <input\r\n              className=\"form-control mb-1\"\r\n              type=\"text\"\r\n              placeholder=\"Address (eg 123 Fake Street, Knoxville, TN 37912)\"\r\n              name=\"address\"\r\n              value={this.state.temp_item.address}\r\n              onChange={this.handleInput}\r\n            />\r\n\r\n            <button type=\"submit\" className=\"btn btn-secondary\">Add Task</button>\r\n          </form>\r\n          {\r\n            !this.state.isValid && (\r\n              <p className=\"error-message\"><small>*Invalid entry. No empty fields.</small></p>\r\n            )\r\n          }\r\n        </div>\r\n\r\n        <FilterSelect\r\n          locationKeys={this.props.locationKeys}\r\n          filterKey={this.props.filterKey}\r\n          filterDist={this.props.filterDist}\r\n          onFilterTaskLocations={this.props.onFilterTaskLocations}\r\n          onFilterDistLocations={this.props.onFilterDistLocations}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport MapGL, { Marker, NavigationControl } from 'react-map-gl';\r\nimport '../../../node_modules/mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst token = process.env.REACT_APP_API_KEY;\r\n\r\n//set navigation controls\r\nconst navStyle = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  padding: '10px'\r\n};\r\n\r\n//set initial viewport parameters\r\nconst initViewport = {\r\n  latitude: 0,\r\n  longitude: 0,\r\n  zoom: 12,\r\n  width: window.innerWidth,\r\n  height: window.innerHeight - 1\r\n}\r\n\r\nclass Map extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: initViewport,\r\n      coordinates: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  //Update viewport if user coordinates have been received\r\n  focusMapOnUserCoordinates() {\r\n    if (this._isMounted) {\r\n      this.props.getUserCoordinates().then(position => {\r\n        const userLatitude = position.coords.latitude\r\n        const userLongitude = position.coords.longitude\r\n        this.setState({\r\n          viewport: {\r\n            ...initViewport,\r\n            latitude: userLatitude,\r\n            longitude: userLongitude,\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  //Update state if an address has been entered\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.coordinates !== state.coordinates) {\r\n      return {\r\n        coordinates: props.coordinates,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _updateViewport = (viewport) => {\r\n    this.setState({ viewport })\r\n  };\r\n\r\n  //Create marker for every location on list \r\n  _renderMarkers = (point, index) => {\r\n    return (\r\n      <Marker\r\n        key={`marker-${index}`}\r\n        latitude={point.latitude}\r\n        longitude={point.longitude}\r\n        offsetLeft={-point.latitude * .25}\r\n        offsetTop={-point.latitude * .75}\r\n      >\r\n        <i\r\n          className=\"fas fa-map-pin fa-2x todo-map-marker\"\r\n        ></i>\r\n      </Marker>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { viewport, coordinates } = this.state;\r\n\r\n    this.focusMapOnUserCoordinates();\r\n\r\n    return (\r\n      <MapGL\r\n        {...viewport}\r\n        mapStyle='mapbox://styles/mapbox/streets-v9'\r\n        mapboxApiAccessToken={token}\r\n        onViewportChange={this._updateViewport}\r\n      >\r\n        {coordinates.map(this._renderMarkers)}\r\n\r\n        <div className=\"nav\" style={navStyle}>\r\n          <NavigationControl onViewportChange={this._updateViewport} />\r\n        </div>\r\n\r\n      </MapGL>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\n\r\nexport default function ListItem(props) {\r\n  return (\r\n    <li className={`list-item ${props.classes}`}>      \r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"list__item--child__checkbox\"\r\n        onClick={() => props.onDeleteItem(props.item)}\r\n      />\r\n      <span className=\"list__item--child__value\">{ props.item.text }</span>\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ListItem from './list-item/ListItem';\r\n\r\nexport default function List(props) {\r\n  const list = [];\r\n\r\n\r\n\r\n  for (let key in props.items) {    \r\n   const distance = props.items[key][0][\"distance\"];\r\n   \r\n    list.push((\r\n      <li className={`list__item ${(distance > props.filterDist)? \"hidden\" : \"\" }`} key={key}>\r\n        <h5 className=\"list-item__heading\">{ key.toUpperCase() }</h5>\r\n        <ul className=\"list\">\r\n          {\r\n            props.items[key].map(item => (\r\n              <ListItem\r\n                classes=\"list__item--child\"\r\n                key={item.key}\r\n                item={item}\r\n                onDeleteItem={props.onDeleteItem}\r\n              />\r\n            ))\r\n          }\r\n        </ul>\r\n      </li>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <ul className=\"list list--parent\">\r\n      { list }\r\n    </ul>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n      return this.props.children;\r\n    }\r\n  }","import React, { Component } from 'react';\r\n\r\n// Import components\r\nimport ItemInput from './containers/item-input/ItemInput';\r\nimport Map from './containers/map/Map';\r\nimport List from './components/list/List';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: {},\r\n      filterKey: 'All',\r\n      filterDist: '99999',\r\n      user: {\r\n        latitude: null,\r\n        longitude: null\r\n      }\r\n    }\r\n  }\r\n\r\n  // Store geolocation API in a Promise, update them in state\r\n  getUserCoordinates() {\r\n    return new Promise((res, rej) => {\r\n      navigator.geolocation.getCurrentPosition(res, rej, { enableHighAccuracy: true });\r\n    })\r\n  }\r\n\r\n  setUserCoordinatesToState(position) {\r\n    const userLatitude = position.coords.latitude\r\n    const userLongitude = position.coords.longitude\r\n    this.setState({\r\n      user: {\r\n        latitude: userLatitude,\r\n        longitude: userLongitude,\r\n      }\r\n    })\r\n  }\r\n\r\n  // Set user location into state on load\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n\r\n    if (this._isMounted && navigator.geolocation) {\r\n      this.getUserCoordinates()\r\n        .then(data => this.setUserCoordinatesToState(data))\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  //Add items to state when user inputs\r\n  handleAddItem = item => {\r\n    const currentItem = { ...item };\r\n\r\n    const items = this.state.items;\r\n    const isLocationInState = items.hasOwnProperty(item.location)\r\n\r\n    if (isLocationInState) {\r\n      items[item.location].push(item)\r\n    } else {\r\n      items[item.location] = [item];\r\n    }\r\n\r\n    // update state with new item\r\n    this.setState({\r\n      items,\r\n      currentItem\r\n    });\r\n  };\r\n\r\n  handleDeleteItem = item => {\r\n    let allItems = { ...this.state.items };\r\n    const key = item.key\r\n    const listItems = this.state.items[item.location]\r\n      .filter(item => item.key !== key)\r\n\r\n    // If no more list items, delete location from allItems\r\n    if (listItems.length === 0) {\r\n      delete allItems[item.location];\r\n    } else {\r\n      // else update allItems with new listItems locations\r\n      allItems[item.location] = listItems;\r\n    }\r\n\r\n    // update state with item deleted\r\n    this.setState({\r\n      items: allItems\r\n    });\r\n  }\r\n\r\n  handleFilterTaskLocations = (e) => {\r\n    this.setState({\r\n      filterKey: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleFilterDistLocations = (e) => {\r\n    this.setState({\r\n      filterDist: e.target.value\r\n    })\r\n  }\r\n\r\n  //Get coordinates of address entered for new location: re-write to render filteredItems and not this.state.items\r\n  getCoordinates = (location) => {\r\n    let items = Object.values(this.state.items).flat();\r\n    let coordinates = [];\r\n    let filterDist = this.state.filterDist\r\n    const itemsWithinDistance = items.filter(item => item.distance <= filterDist);\r\n\r\n    const mapTasks = task => ({\r\n      latitude: task.coordinates.latitude,\r\n      longitude: task.coordinates.longitude,\r\n    });\r\n\r\n    if (location === 'All') {\r\n      const itemValues = [itemsWithinDistance]; \r\n      // convert items object to array of values\r\n      coordinates = itemValues.map(loc => loc.map(mapTasks))\r\n        .reduce((acc, curr) => acc.concat(curr), []); // flatten nested arrays\r\n    } else {\r\n      //make tasks filter out all of [itemsWithinDistance] where location !== filterKey\r\n      const tasks = itemsWithinDistance.filter(item => item.location === location) \r\n      coordinates = tasks.map(mapTasks) \r\n      \r\n\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  render() {\r\n    let filteredItems;\r\n    let coordinates;\r\n    let filterKey = this.state.filterKey\r\n    // Get filteredItems and coordinates\r\n    if (filterKey === 'All') {\r\n      filteredItems = Object.assign({}, this.state.items); \r\n      coordinates = this.getCoordinates('All');\r\n    } else if (filterKey !== 'All' && !this.state.items[filterKey]) {\r\n      filterKey = 'All';\r\n      coordinates = this.getCoordinates('All');\r\n    } else {\r\n      const obj = {};\r\n      obj[filterKey] = [...this.state.items[filterKey]];\r\n      filteredItems = obj;\r\n      coordinates = this.getCoordinates(filterKey);\r\n    } \r\n\r\n    return (\r\n      <div className=\"App\">\r\n       <div className=\"todo-container\">\r\n          <ItemInput\r\n            user={this.state.user}\r\n            coordinates={coordinates}\r\n            onAddItem={this.handleAddItem}\r\n            locationKeys={Object.keys(this.state.items)}\r\n            onFilterTaskLocations={this.handleFilterTaskLocations}\r\n            onFilterDistLocations={this.handleFilterDistLocations}\r\n            filterKey={this.state.filterKey}\r\n            filterDist={this.state.filterDist}\r\n          />\r\n          <ErrorBoundary>\r\n          <List\r\n            items={filteredItems}\r\n            filterDist={this.state.filterDist}\r\n            onDeleteItem={this.handleDeleteItem}\r\n          />\r\n          </ErrorBoundary>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <Map\r\n            coordinates={coordinates}\r\n            getUserCoordinates={this.getUserCoordinates}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Import App Styles\r\nimport './assets/scss/styles.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}